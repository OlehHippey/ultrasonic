C51 COMPILER V9.60.0.0   TIMER01_M1                                                        06/17/2024 10:47:34 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TIMER01_M1
OBJECT MODULE PLACED IN .\Output\Timer01_M1.obj
COMPILER INVOKED BY: D:\OleksandrVelihorskyi\KEIL\C51\BIN\C51.EXE Code\Timer01_M1.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(..\..\Include) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\Timer01_M1.lst) TABS(5) OBJECT(.\Output\Timer01_M1.o
                    -bj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2017 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Nuvoton Technoledge Corp. 
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //  Date   : Apr/21/2017
  12          //********************************************************************************************************
             -***
  13          
  14          //********************************************************************************************************
             -***
  15          //  File Function: N76E003 Timer0/1 Mode1 demo code
  16          //********************************************************************************************************
             -***
  17          #include "N76E003.h"
  18          #include "Common.h"
  19          #include "Delay.h"
  20          #include "Timer01.h"
  21          #include "SFR_Macro.h"
  22          #include "Function_define.h"
  23          //*****************  The Following is in define in Fucntion_define.h  ***************************
  24          //****** Always include Function_define.h call the define you want, detail see main(void) *******
  25          //***********************************************************************************************
  26          #if 0
              //#define      TIMER0_MODE0_ENABLE      TMOD&=0x0F
              //#define      TIMER0_MODE1_ENABLE      TMOD&=0x0F;TMOD|=0x10
              //#define      TIMER0_MODE2_ENABLE      TMOD&=0x0F;TMOD|=0x20
              //#define      TIMER0_MODE3_ENABLE      TMOD&=0x0F;TMOD|=0x3F
              
              //#define      TIMER1_MODE0_ENABLE      TMOD&=0xF0
              //#define      TIMER1_MODE1_ENABLE      TMOD&=0xF0;TMOD|=0x01
              //#define      TIMER1_MODE2_ENABLE      TMOD&=0xF0;TMOD|=0x02
              //#define      TIMER1_MODE3_ENABLE      TMOD&=0xF0;TMOD|=0xF3
              #endif
  37          
  38          
  39          
  40          #define LED_TX_PIN P00
  41          #define LED_TX_PIN_SET set_P00
  42          #define LED_TX_PIN_CLR clr_P00
  43          
  44          #define LED_STS_PIN P01
C51 COMPILER V9.60.0.0   TIMER01_M1                                                        06/17/2024 10:47:34 PAGE 2   

  45          #define LED_STS_SET set_P01
  46          #define LED_STS_CLR clr_P01
  47          
  48          #define LED_LVL_PIN P11
  49          #define LED_LVL_PIN_SET set_P11
  50          #define LED_LVL_PIN_CLR clr_P11
  51          
  52          
  53          #define RF_TX_PIN P14
  54          #define RF_TX_PIN_SET set_P14
  55          #define RF_TX_PIN_CLR clr_P14
  56          
  57          #define TRIG_PIN P17
  58          #define TRIG_PIN_SET set_P17
  59          #define TRIG_PIN_CLR clr_P17
  60          #define ECHO_PIN() P30
  61          #define ECHO_PIN_SET set_P17
  62          #define ECHO_PIN_CLR clr_P17
  63          
  64          #define RF_UZ_PIN P04
  65          #define RF_UZ_SET set_P04
  66          #define RF_UZ_CLR clr_P04
  67          
  68          #define RF_TM_PIN P15
  69          #define RF_TM_SET set_P15
  70          #define RF_TM_CLR clr_P15
  71          
  72          
  73          #define DS18B20_PIN() P05
  74          #define DS18B20_PIN_SET set_P05
  75          #define DS18B20_PIN_CLR clr_P05
  76          
  77          #define  CMD_SKIP_ROM            0xCC
  78          #define  CMD_CONVERT_T           0x44
  79          #define  CMD_READ_SCRATCHPAD     0xBE
  80          
  81          
  82          #define RELOAD_VALUE_H  (65536-1500)/256
  83          #define RELOAD_VALUE_L  (65536-1500)%256
  84          
  85          #define ADC_CHANNEL 0 // ADC channel 0 (P1.2)
  86          #define VDD_VOLTAGE 3300 // The supply voltage in millivolts (e.g., 3.3V)
  87          
  88          //========================== VARIABLES =========================================
  89          volatile bit led_on = 0;
  90          
  91          volatile unsigned int distance_measurement  = 0;
  92          volatile unsigned int cnt_sec = 0;
  93          
  94          float outTemperature = 0.0;
  95          float supplyVoltage = 0.0;
  96          double Bandgap_Voltage = 0.0; 
  97          double Bandgap_Value = 0.0;
  98          double VDD_Voltage = 0.0;
  99          
 100          volatile unsigned int batteryValue = 0;
 101          volatile unsigned int temperatureValue = 0;
 102               
 103          const unsigned char tmr_clbr=194;
 104          const unsigned char poopADDR[3]={20,22}; //
 105          
 106          //------------------------------------------------------------
C51 COMPILER V9.60.0.0   TIMER01_M1                                                        06/17/2024 10:47:34 PAGE 3   

 107          double  Bandgap_Voltage,VDD_Voltage;              //please always use "double" mode for this
 108          unsigned  char xdata ADCdataH[5], ADCdataL[5];
 109          int ADCsumH=0, ADCsumL=0;
 110          unsigned char ADCavgH,ADCavgL;
 111          
 112          //========================== BASIC FUNCTIONS ===================================
 113          unsigned char Get_Low_Byte(unsigned int word) {return word - 0x100 * (word / 0x100);}
 114          //------------------------------------------------------------------------------
 115          unsigned char Get_High_Byte(unsigned int word) {return word / 0x100;}
 116          //------------------------------------------------------------------------------
 117          unsigned char set_Bit(char num_val, char num_bit) {return num_val = num_val | (1 << num_bit);}
 118          //------------------------------------------------------------------------------
 119          unsigned char clr_Bit(char num_val, char num_bit) {return  num_val = num_val & ~(1 << num_bit);}
 120          //------------------------------------------------------------------------------
 121          unsigned char tgl_Bit(char num_val, char num_bit) {return num_val = num_val ^ (1 << num_bit);}
 122          //------------------------------------------------------------------------------
 123          unsigned char get_Bit(char num_val, char num_bit) {return num_val = (num_val >> num_bit) & 1; }
 124          //------------------------------------------------------------------------------
 125          unsigned char upd_Bit(char num_val, char num_bit, char num_shift) {
 126   1        if (get_Bit(num_val, num_bit)) return (set_Bit(num_val, num_bit+num_shift));
 127   1           else return (clr_Bit(num_val, num_bit+num_shift));
 128   1      }
 129          //------------------------------------------------------------------------------
 130          unsigned char makeIntToHex(unsigned char dec_symbol){
 131   1        if (dec_symbol<10) return(dec_symbol+0x30); else
 132   1        if (dec_symbol>9 && dec_symbol<16)return(dec_symbol+0x37); else return(0);
 133   1      }
 134          //========================= MCU FUNCTIONS =====================================
 135          void Init_MCU(){ //Init processes
 136   1          clr_EA; // Disable global interrupts during ADC initialization
 137   1          
 138   1          P00_PushPull_Mode;       //LED TX     
 139   1          P01_PushPull_Mode;       //LED STATUS
 140   1          P11_PushPull_Mode;       //LED LEVEL   
 141   1           
 142   1          P04_PushPull_Mode;       //SONAR POWER  
 143   1          P15_PushPull_Mode;       //DALLAS POWER
 144   1           
 145   1          P05_Quasi_Mode;    // Dallas pin
 146   1          P14_PushPull_Mode;    // Radio pin config
 147   1          P17_Quasi_Mode;       // Set TRIG_PIN (P17) as Quasi-bidirectional mode
 148   1          P30_Quasi_Mode;       // Set ECHO_PIN (P30) as Input mode
 149   1        
 150   1      //    ADCM = ADC_CLOCK_P12_DIV_16; // Set ADC clock divider (adjust as needed)
 151   1      //    ADCCON1 = (ADCCON1 & 0xCF) | 0x00; // Select channel 0 (P1.2) as ADC input
 152   1      /*     
 153   1          TIMER0_MODE1_ENABLE;  // TMOD = 0x01;     // Timer0 mode 1 (16-bit timer)
 154   1          set_ET0;              // enable Timer0 interruptTH0 = 0;
 155   1          TH0 = 0; 
 156   1          TL0 = 0;              // set counter  
 157   1          set_EA;               // EA = 1; Enable global interrupt
 158   1          set_ET0;              // ET0 = 1;Enable Timer0 interrupt
 159   1          set_TR0;             // TR0 = 1;   Start Timer0
 160   1       */  
 161   1          RH3 = RELOAD_VALUE_H;                       //initial counter values 
 162   1          RL3 = RELOAD_VALUE_L;    
 163   1          set_ET3;                                    //enable Timer3 interrupt
 164   1          set_EA;                                     //enable interrupts
 165   1          set_TR3;                                    //Timer3 run
 166   1      
 167   1          RF_UZ_CLR;
 168   1          RF_TM_CLR; 
C51 COMPILER V9.60.0.0   TIMER01_M1                                                        06/17/2024 10:47:34 PAGE 4   

 169   1      
 170   1          TRIG_PIN_CLR;
 171   1          ECHO_PIN_CLR;
 172   1      
 173   1      }
 174          //-----------------------------------------------------------------------------
 175          void delay_rf(uint8_t ms) {
 176   1         uint16_t dly_us;
 177   1         while(ms--) {
 178   2           dly_us= 510; //410; //340   
 179   2           while(dly_us--) {
 180   3              _nop_();
 181   3           }
 182   2        }
 183   1      }
 184          //-----------------------------------------------------------------------------
 185          void delay_sonar(unsigned int us) {
 186   1          while(us--) _nop_();
 187   1      }
 188          //-----------------------------------------------------------------------------
 189          void delay_us(unsigned int us) {
 190   1          while(us--) {
 191   2              _nop_();
 192   2              _nop_();
 193   2              _nop_();
 194   2              _nop_();
 195   2          }
 196   1      }
 197          //-----------------------------------------------------------------------------
 198          void delay_ms(unsigned int ms) {
 199   1          while(ms--) {
 200   2              delay_us(1000);
 201   2          }
 202   1      }
 203          //========================= SONAR FUNCTIONS ===================================
 204          void reset_Echolot(){
 205   1           uint16_t cnt_echo=0;
 206   1           uint32_t i;
 207   1      
 208   1           TRIG_PIN_SET;           // Generate 10us pulse on TRIG_PIN
 209   1           delay_us(10); //delay_sonar(10);
 210   1           TRIG_PIN_CLR;
 211   1           while(!ECHO_PIN());                /* Waiting for Echo */
 212   1           while(ECHO_PIN()){
 213   2             cnt_echo++; _nop_();
 214   2           };        /* Waiting for Echo goes LOW */
 215   1           i = 28*cnt_echo;  /* find distance(in cm) */
 216   1           distance_measurement =i/1000;
 217   1           printf ("\n Distance %d =  %d cm \n", cnt_echo, distance_measurement);   
 218   1      }
 219          //========================== RADIO FUNCTIONS =======================================
 220          void sendEV1527Code(unsigned long ev1527Code) {
 221   1          uint8_t i = 0;
 222   1          const unsigned char tmrEVset=4; //350
 223   1          LED_TX_PIN_SET;     
 224   1          //Send start bit
 225   1          RF_TX_PIN_SET;  //RF_TX_PIN = 1; Set the RF transmitter pin HIGH for a '1' bit
 226   1          delay_rf(tmrEVset);
 227   1          RF_TX_PIN_CLR;  //RF_TX_PIN = 0; 
 228   1          delay_rf(31*tmrEVset);     
 229   1          for (i = 0; i < 24; i++) {
 230   2              if (ev1527Code & (1UL << i)) {
C51 COMPILER V9.60.0.0   TIMER01_M1                                                        06/17/2024 10:47:34 PAGE 5   

 231   3                  RF_TX_PIN_SET;  //RF_TX_PIN = 1; Set the RF transmitter pin HIGH for a '1' bit   
 232   3                  delay_rf(3*tmrEVset);
 233   3                  RF_TX_PIN_CLR;  //RF_TX_PIN = 0; 
 234   3                  delay_rf(tmrEVset);
 235   3              } else {
 236   3                  RF_TX_PIN_SET;  //RF_TX_PIN = 1; Set the RF transmitter pin HIGH for a '1' bit 
 237   3                  delay_rf(tmrEVset);
 238   3                  RF_TX_PIN_CLR;  //RF_TX_PIN = 0;
 239   3                  delay_rf(3*tmrEVset);
 240   3              }
 241   2          }
 242   1          LED_TX_PIN_CLR;
 243   1      }
 244          //--------------------------------------------------------------
 245          void sendEV1527temp() {
 246   1          uint8_t i = 0;
 247   1          uint8_t j = 0; 
 248   1          uint8_t c = 0xAA;
 249   1          LED_TX_PIN_SET;     
 250   1          //Send start bit
 251   1          RF_TX_PIN_SET;  //RF_TX_PIN = 1; Set the RF transmitter pin HIGH for a '1' bit
 252   1          delay_rf(1);
 253   1          RF_TX_PIN_CLR;  //RF_TX_PIN = 0; 
 254   1          delay_rf(31);     
 255   1          for (i=0; i<3; i++){
 256   2             if (i==0) c = 0xBA; else c = 0xAA;
 257   2             for (j=0;j<8;j++){
 258   3                  if (get_Bit(c, 7-j)){
 259   4                       RF_TX_PIN_SET;  //RF_TX_PIN = 1; Set the RF transmitter pin HIGH for a '1' bit 
 260   4                       delay_rf(3);
 261   4                       RF_TX_PIN_CLR;  //RF_TX_PIN = 0; 
 262   4                       delay_rf(1);
 263   4                  } else {
 264   4                       RF_TX_PIN_SET;  //RF_TX_PIN = 1; Set the RF transmitter pin HIGH for a '1' bit 
 265   4                       delay_rf(1);
 266   4                       RF_TX_PIN_CLR;  //RF_TX_PIN = 0; 
 267   4                       delay_rf(3);
 268   4                  }
 269   3             }
 270   2          }
 271   1          RF_TX_PIN_CLR;
 272   1          LED_TX_PIN_CLR;
 273   1      }
 274          //======================== ONE WIRE FUNCTIONS ================================================
 275          bit ds18b20_reset() { //Reset the DS18B20 and check if the device is present
 276   1           bit presence = 0;
 277   1           uint8_t i_try;
 278   1           i_try=0;  presence=1;
 279   1           while (presence){
 280   2                DS18B20_PIN_CLR; //Set pin 0
 281   2                delay_us(480);   //Delay at least 480us
 282   2                DS18B20_PIN_SET; //Release data line 
 283   2                delay_us(60);    //Waiting for 60us
 284   2                presence = DS18B20_PIN();
 285   2                delay_us(420);
 286   2                i_try++;
 287   2                if (i_try>114) return 0;
 288   2           }
 289   1          return 1; //presence
 290   1      }
 291          //---------------------------------------------------------------------------------------------
 292          void ds18b20_write_byte(uint8_t dataTemperature) {
C51 COMPILER V9.60.0.0   TIMER01_M1                                                        06/17/2024 10:47:34 PAGE 6   

 293   1          uint8_t i;
 294   1          for (i = 0; i < 8; i++) {
 295   2              DS18B20_PIN_CLR;
 296   2              _nop_();
 297   2              if (dataTemperature & 0x01) DS18B20_PIN_SET; 
 298   2              delay_us(60);
 299   2              DS18B20_PIN_SET;
 300   2              dataTemperature >>= 1;
 301   2          }
 302   1      }
 303          //---------------------------------------------------------------------------------------------
 304          unsigned char ds18b20_read_byte() { //Write 1 byte of data to the DS18B20
 305   1          uint8_t i, dataTemperature = 0;
 306   1          for (i = 0; i < 8; i++) {
 307   2              dataTemperature >>= 1; 
 308   2              DS18B20_PIN_CLR;
 309   2              _nop_();
 310   2              DS18B20_PIN_SET;
 311   2              delay_us(1);
 312   2              if (DS18B20_PIN()) {
 313   3                  dataTemperature |= 0x80;
 314   3              }
 315   2              delay_us(60);
 316   2          }
 317   1          return dataTemperature;
 318   1      }
 319          //---------------------------------------------------------------------------------------------
 320          float read_ds18b20_temperature() {
 321   1          unsigned char lsb, msb;
 322   1          float temperature;
 323   1          LED_LVL_PIN_SET;  
 324   1          printf ("\n Start  ds18b20 \n");  
 325   1          if (ds18b20_reset()==1){
 326   2               ds18b20_write_byte(CMD_SKIP_ROM); // Skip ROM command
 327   2               ds18b20_write_byte(CMD_CONVERT_T); // Convert temperature command
 328   2          //     delay_ms(750); // DS18B20 conversion time
 329   2               while (!DS18B20_PIN());  // DS18B20 conversion time
 330   2               printf ("\n Send configuration  ds18b20 \n"); 
 331   2          } else {
 332   2             printf ("\n Not detected  ds18b20 \n"); 
 333   2          }
 334   1          
 335   1      
 336   1          if (ds18b20_reset()==1){
 337   2               ds18b20_write_byte(0xCC); // Skip ROM command
 338   2               ds18b20_write_byte(0xBE); // Read Scratchpad command
 339   2               lsb = ds18b20_read_byte();
 340   2               msb = ds18b20_read_byte();
 341   2               temperature = ((msb << 8) | lsb) * 0.0625;
 342   2               printf ("\n Temperature = %e \n", temperature); 
 343   2          }
 344   1          
 345   1          LED_LVL_PIN_CLR;   
 346   1          return temperature;
 347   1      }
 348          
 349          //======================= ADC Functions ======================================================
 350          void READ_BANDGAP() { 
 351   1           UINT8 BandgapHigh,BandgapLow; 
 352   1           set_IAPEN; // Enable IAPEN 
 353   1           IAPAL = 0x0C; 
 354   1           IAPAH = 0x00; 
C51 COMPILER V9.60.0.0   TIMER01_M1                                                        06/17/2024 10:47:34 PAGE 7   

 355   1           IAPCN = 0x04; 
 356   1           set_IAPGO; // Trig set IAPGO 
 357   1           BandgapHigh = IAPFD; 
 358   1           IAPAL = 0x0d;
 359   1           IAPAH = 0x00; 
 360   1           IAPCN = 0x04; 
 361   1           set_IAPGO; // Trig set IAPGO 
 362   1           BandgapLow = IAPFD; 
 363   1           BandgapLow = BandgapLow&0x0F; 
 364   1           clr_IAPEN; // Disable IAPEN 
 365   1           Bandgap_Value = (BandgapHigh<<4)+BandgapLow; 
 366   1           Bandgap_Voltage = 3072/(0x1000/Bandgap_Value); 
 367   1      }
 368          //--------------------------------------------------------------------------------------------------------
             --
 369          void ADC_Bypass (void){  // The first three times convert should be bypass
 370   1         unsigned char ozc; 
 371   1         for (ozc=0;ozc<0x03;ozc++){
 372   2           clr_ADCF; 
 373   2           set_ADCS; 
 374   2           while(ADCF == 0); 
 375   2         } 
 376   1      }
 377          //--------------------------------------------------------------------------------------------------------
             ---
 378          void READ_BANDGAP_CUSTOM(){
 379   1        UINT8 BandgapHigh,BandgapLow,BandgapMark;
 380   1        double Bandgap_Value,Bandgap_Voltage_Temp;
 381   1        set_IAPEN;
 382   1        IAPCN = READ_UID;
 383   1        IAPAL = 0x0d;
 384   1        IAPAH = 0x00;
 385   1        set_IAPGO;
 386   1        BandgapLow = IAPFD;
 387   1        BandgapMark = BandgapLow&0xF0;
 388   1        if (BandgapMark==0x80){
 389   2           BandgapLow = BandgapLow&0x0F;
 390   2           IAPAL = 0x0C;
 391   2           IAPAH = 0x00;
 392   2           set_IAPGO;
 393   2           BandgapHigh = IAPFD;
 394   2           Bandgap_Value = (BandgapHigh<<4)+BandgapLow;
 395   2           Bandgap_Voltage_Temp = Bandgap_Value*3/4;
 396   2           Bandgap_Voltage = Bandgap_Voltage_Temp - 33;           //the actually banggap voltage value is similar this value
             -.
 397   2        }
 398   1        if (BandgapMark==0x00){
 399   2           BandgapLow = BandgapLow&0x0F;
 400   2           IAPAL = 0x0C;
 401   2           IAPAH = 0x00;
 402   2           set_IAPGO;
 403   2           BandgapHigh = IAPFD;
 404   2           Bandgap_Value = (BandgapHigh<<4)+BandgapLow;
 405   2           Bandgap_Voltage= Bandgap_Value*3/4;
 406   2        }
 407   1        if (BandgapMark==0x90){
 408   2           IAPAL = 0x0E;
 409   2           IAPAH = 0x00;
 410   2           set_IAPGO;
 411   2           BandgapHigh = IAPFD;
 412   2           IAPAL = 0x0F;
 413   2           IAPAH = 0x00;
C51 COMPILER V9.60.0.0   TIMER01_M1                                                        06/17/2024 10:47:34 PAGE 8   

 414   2           set_IAPGO;
 415   2           BandgapLow = IAPFD;
 416   2           BandgapLow = BandgapLow&0x0F;
 417   2           Bandgap_Value = (BandgapHigh<<4)+BandgapLow;
 418   2           Bandgap_Voltage= Bandgap_Value*3/4;
 419   2        }
 420   1        clr_IAPEN;
 421   1      //             printf ("\n BG High = %bX",BandgapHigh); 
 422   1      //             printf ("\n BG Low = %bX",BandgapLow); 
 423   1      //             printf ("\n BG ROMMAP = %e",Bandgap_Voltage); 
 424   1      }
 425          //----------------------------------------------------------------------------
 426          void get_MCU_Voltage(){
 427   1          double bgvalue;
 428   1          unsigned int i;
 429   1          Enable_ADC_BandGap;
 430   1          CKDIV = 0x02;   // IMPORTANT!! Modify system clock to 4MHz ,then add the ADC sampling clock base to add 
             -the sampling timing.
 431   1          for(i=0;i<5;i++){ // All following ADC detect timing is 200uS run under 4MHz.
 432   2             clr_ADCF;
 433   2             set_ADCS;                                                                               
 434   2             while(ADCF == 0);
 435   2             ADCdataH[i] = ADCRH;
 436   2             ADCdataL[i] = ADCRL;
 437   2           }         
 438   1           CKDIV = 0x00;  // After ADC sampling, modify system clock back to 16MHz to run next code.
 439   1           Disable_ADC;
 440   1           for(i=2;i<5;i++){// use the last 3 times data to make average 
 441   2                ADCsumH = ADCsumH + ADCdataH[i];
 442   2                ADCsumL = ADCsumL + ADCdataL[i];
 443   2           }                   
 444   1           ADCavgH = ADCsumH/3;
 445   1           ADCavgL = ADCsumL/3;
 446   1           bgvalue = (ADCavgH<<4) + ADCavgL;
 447   1           VDD_Voltage = (0x1000/bgvalue)*Bandgap_Voltage;
 448   1           printf ("\n VDD voltage = %e \n", VDD_Voltage); 
 449   1           //Timer0_Delay1ms(500);
 450   1           ADCsumH = 0;
 451   1           ADCsumL = 0;    
 452   1      }
 453          
 454          //--------------------------------------------------------------------------------------------------------
             ----
 455          void readADCdata(unsigned char adcChannelNumber){
 456   1         unsigned int adc_value=0;  
 457   1         unsigned char ADCdataH=0;
 458   1         unsigned char ADCdataL=0;
 459   1         //READ ADC CHANNELS
 460   1         switch (adcChannelNumber){   
 461   2           case 0:  Enable_ADC_AIN0;  break;   
 462   2           case 1:  Enable_ADC_AIN1;  break;
 463   2           case 2:  Enable_ADC_AIN2;  break;
 464   2           case 3:  Enable_ADC_AIN3;  break;
 465   2           case 4:  Enable_ADC_AIN4;  break;   
 466   2           case 5:  Enable_ADC_AIN5;  break;  
 467   2           case 6:  Enable_ADC_AIN6;  break;
 468   2           case 7:  Enable_ADC_AIN7;  break;          
 469   2           default: Enable_ADC_AIN0;  break;
 470   2         }  
 471   1         clr_ADCF;
 472   1         set_ADCS;                                
 473   1         while(ADCF == 0);
C51 COMPILER V9.60.0.0   TIMER01_M1                                                        06/17/2024 10:47:34 PAGE 9   

 474   1         ADCdataH = ADCRH;
 475   1         ADCdataL = ADCRL;
 476   1         adc_value=ADCRH << 2 | ADCRL;
 477   1         if (adcChannelNumber==0){
 478   2            supplyVoltage = (float)adc_value * VDD_VOLTAGE / 1023.0; // Calculate supply voltage in millivolts
 479   2            batteryValue=(unsigned int)(1000*supplyVoltage);
 480   2         } else {
 481   2            temperatureValue=adc_value;
 482   2         }
 483   1         
 484   1         Disable_ADC;  
 485   1      }
 486          //=============================== LED INFORMATION ===========================================
 487          void ledProc(){
 488   1         if (led_on==0){
 489   2            led_on=1;
 490   2            LED_STS_SET;  
 491   2         } else {
 492   2            led_on=0;
 493   2            LED_STS_CLR; 
 494   2         } 
 495   1      }
 496          //==================================== Power-down Mode Using WKT  ===========================
 497          void sleepPoop(void){
 498   1      /*
 499   1           // Enter power-down mode with wake-up by WKT (Wake-up Timer)
 500   1        set_PCON_PD; // Enter power-down mode with WKT wake-up
 501   1        set_EWKTEN; // Enable WKT (Wake-up Timer)
 502   1        clr_EA; // Disable global interrupts during power-down
 503   1        set_WKTF; // Clear the WKT interrupt flag
 504   1        clr_WKCON_WKTF; // Clear the WKT flag
 505   1        clr_WKCON_WKTR; // Start the WKT (Wake-up Timer)
 506   1      */     
 507   1      }
 508          
 509          /*********************************************************************************************************
             -***
 510          *    TIMER 0 interrupt subroutine
 511          **********************************************************************************************************
             -**/
 512          //void Timer0_ISR (void) interrupt 1  //interrupt address is 0x000B
 513          void Timer3_ISR (void) interrupt 16 
 514          {
 515   1          //TH0 = 0;
 516   1          //TL0 = 0;
 517   1          clr_TF3; 
 518   1          if (cnt_sec<50) cnt_sec++; 
 519   1      }
 520          /*********************************************************************************************************
             -***
 521          *    Main function 
 522          **********************************************************************************************************
             -**/
 523          void main (void){
 524   1          uint8_t i=0;
 525   1          Init_MCU();
 526   1          READ_BANDGAP_CUSTOM();
 527   1         //READ_BANDGAP();
 528   1          InitialUART0_Timer1(9600); 
 529   1          while(1){
 530   2            if (cnt_sec>=50){
 531   3               cnt_sec=0;   
C51 COMPILER V9.60.0.0   TIMER01_M1                                                        06/17/2024 10:47:34 PAGE 10  

 532   3               ledProc();  
 533   3               reset_Echolot();
 534   3              // readADCdata(0);
 535   3              // readADCdata(1);
 536   3               get_MCU_Voltage(); 
 537   3               outTemperature = read_ds18b20_temperature();  
 538   3               for (i=0; i<8; i++) 
 539   3               //  sendEV1527Code(0x808080);
 540   3                 sendEV1527temp();
 541   3      //         if (test_key_IN()==0)
 542   3      //          SendRsString();
 543   3            }
 544   2            delay_ms(10);
 545   2          };
 546   1      }
 547          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2378    ----
   CONSTANT SIZE    =    144    ----
   XDATA SIZE       =     48      27
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
